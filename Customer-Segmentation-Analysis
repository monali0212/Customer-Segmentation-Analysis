{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7a9c3066",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:02.613839Z",
     "iopub.status.busy": "2024-11-24T18:31:02.613389Z",
     "iopub.status.idle": "2024-11-24T18:31:03.742650Z",
     "shell.execute_reply": "2024-11-24T18:31:03.741331Z"
    },
    "papermill": {
     "duration": 1.138304,
     "end_time": "2024-11-24T18:31:03.745713",
     "exception": false,
     "start_time": "2024-11-24T18:31:02.607409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.xlsx\n",
      "/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9d23c3e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:03.755469Z",
     "iopub.status.busy": "2024-11-24T18:31:03.754931Z",
     "iopub.status.idle": "2024-11-24T18:31:05.188432Z",
     "shell.execute_reply": "2024-11-24T18:31:05.187163Z"
    },
    "papermill": {
     "duration": 1.441382,
     "end_time": "2024-11-24T18:31:05.191032",
     "exception": false,
     "start_time": "2024-11-24T18:31:03.749650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  InvoiceNo StockCode                          Description  Quantity  \\\n",
      "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
      "1    536365     71053                  WHITE METAL LANTERN         6   \n",
      "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
      "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
      "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
      "\n",
      "        InvoiceDate  UnitPrice  CustomerID         Country  \n",
      "0  01-12-2010 08:26       2.55     17850.0  United Kingdom  \n",
      "1  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n",
      "2  01-12-2010 08:26       2.75     17850.0  United Kingdom  \n",
      "3  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n",
      "4  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.csv\", encoding='latin1')\n",
    "print(data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2e264dd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:05.200304Z",
     "iopub.status.busy": "2024-11-24T18:31:05.199915Z",
     "iopub.status.idle": "2024-11-24T18:31:18.116887Z",
     "shell.execute_reply": "2024-11-24T18:31:18.115441Z"
    },
    "papermill": {
     "duration": 12.924739,
     "end_time": "2024-11-24T18:31:18.119394",
     "exception": false,
     "start_time": "2024-11-24T18:31:05.194655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cp1250\n"
     ]
    }
   ],
   "source": [
    "from charset_normalizer import from_path\n",
    "\n",
    "# Detect file encoding\n",
    "result = from_path(\"/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.csv\").best()\n",
    "print(result.encoding)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "089a2968",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:18.128405Z",
     "iopub.status.busy": "2024-11-24T18:31:18.127983Z",
     "iopub.status.idle": "2024-11-24T18:31:19.033488Z",
     "shell.execute_reply": "2024-11-24T18:31:19.032322Z"
    },
    "papermill": {
     "duration": 0.913246,
     "end_time": "2024-11-24T18:31:19.036279",
     "exception": false,
     "start_time": "2024-11-24T18:31:18.123033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.csv\", encoding='latin1')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26d11f2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:19.045310Z",
     "iopub.status.busy": "2024-11-24T18:31:19.044898Z",
     "iopub.status.idle": "2024-11-24T18:31:19.877019Z",
     "shell.execute_reply": "2024-11-24T18:31:19.875758Z"
    },
    "papermill": {
     "duration": 0.839381,
     "end_time": "2024-11-24T18:31:19.879357",
     "exception": false,
     "start_time": "2024-11-24T18:31:19.039976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  InvoiceNo StockCode                          Description  Quantity  \\\n",
      "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
      "1    536365     71053                  WHITE METAL LANTERN         6   \n",
      "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
      "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
      "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
      "\n",
      "        InvoiceDate  UnitPrice  CustomerID         Country  \n",
      "0  01-12-2010 08:26       2.55     17850.0  United Kingdom  \n",
      "1  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n",
      "2  01-12-2010 08:26       2.75     17850.0  United Kingdom  \n",
      "3  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n",
      "4  01-12-2010 08:26       3.39     17850.0  United Kingdom  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Try reading the file with a commonly used encoding\n",
    "data = pd.read_csv(\"/kaggle/input/tata-online-retail-dataset/Online Retail Data Set.csv\", encoding='latin1')\n",
    "\n",
    "# Inspect the dataset\n",
    "print(data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6bc29b2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:19.888166Z",
     "iopub.status.busy": "2024-11-24T18:31:19.887815Z",
     "iopub.status.idle": "2024-11-24T18:31:20.730827Z",
     "shell.execute_reply": "2024-11-24T18:31:20.729675Z"
    },
    "papermill": {
     "duration": 0.850654,
     "end_time": "2024-11-24T18:31:20.733654",
     "exception": false,
     "start_time": "2024-11-24T18:31:19.883000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 536641 entries, 0 to 541908\n",
      "Data columns (total 8 columns):\n",
      " #   Column       Non-Null Count   Dtype  \n",
      "---  ------       --------------   -----  \n",
      " 0   InvoiceNo    536641 non-null  object \n",
      " 1   StockCode    536641 non-null  object \n",
      " 2   Description  536641 non-null  object \n",
      " 3   Quantity     536641 non-null  int64  \n",
      " 4   InvoiceDate  536641 non-null  object \n",
      " 5   UnitPrice    536641 non-null  float64\n",
      " 6   CustomerID   536641 non-null  float64\n",
      " 7   Country      536641 non-null  object \n",
      "dtypes: float64(2), int64(1), object(5)\n",
      "memory usage: 36.8+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Remove duplicates\n",
    "data = data.drop_duplicates()\n",
    "\n",
    "# Handle numeric columns\n",
    "numeric_cols = data.select_dtypes(include=['number']).columns\n",
    "data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].mean())\n",
    "\n",
    "# Handle non-numeric columns\n",
    "non_numeric_cols = data.select_dtypes(exclude=['number']).columns\n",
    "data[non_numeric_cols] = data[non_numeric_cols].fillna(\"Unknown\")\n",
    "\n",
    "# Verify changes\n",
    "print(data.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "db730092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:31:20.743341Z",
     "iopub.status.busy": "2024-11-24T18:31:20.742934Z",
     "iopub.status.idle": "2024-11-24T18:47:52.024563Z",
     "shell.execute_reply": "2024-11-24T18:47:52.023373Z"
    },
    "papermill": {
     "duration": 991.293524,
     "end_time": "2024-11-24T18:47:52.031334",
     "exception": false,
     "start_time": "2024-11-24T18:31:20.737810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Replace infinite values with NaN\n",
    "data.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "\n",
    "# Fill missing values for numeric columns\n",
    "numeric_cols = data.select_dtypes(include=['number']).columns\n",
    "data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].mean())\n",
    "\n",
    "# Visualize 'Quantity' column\n",
    "sns.histplot(data['Quantity'])\n",
    "plt.title('Distribution of Quantity')\n",
    "plt.show()\n",
    "\n",
    "# If needed, log transform the data before visualization\n",
    "# sns.histplot(np.log1p(data['Quantity']))\n",
    "# plt.title('Log-Transformed Distribution of Quantity')\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79401b0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:47:52.041562Z",
     "iopub.status.busy": "2024-11-24T18:47:52.040991Z",
     "iopub.status.idle": "2024-11-24T18:47:52.300457Z",
     "shell.execute_reply": "2024-11-24T18:47:52.299007Z"
    },
    "papermill": {
     "duration": 0.267229,
     "end_time": "2024-11-24T18:47:52.302745",
     "exception": false,
     "start_time": "2024-11-24T18:47:52.035516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['InvoiceNo', 'StockCode', 'Description', 'Quantity', 'InvoiceDate',\n",
      "       'UnitPrice', 'CustomerID', 'Country'],\n",
      "      dtype='object')\n",
      "   Quantity  UnitPrice\n",
      "0 -0.016520  -0.021419\n",
      "1 -0.016520  -0.012780\n",
      "2 -0.007393  -0.019362\n",
      "3 -0.016520  -0.012780\n",
      "4 -0.016520  -0.012780\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Check the columns in your dataset\n",
    "print(data.columns)\n",
    "\n",
    "# Assuming 'Quantity' and 'UnitPrice' are the columns you want to scale\n",
    "scaler = StandardScaler()\n",
    "scaled_data = scaler.fit_transform(data[['Quantity', 'UnitPrice']])\n",
    "\n",
    "# Optionally, convert scaled data back into a DataFrame if needed\n",
    "scaled_data_df = pd.DataFrame(scaled_data, columns=['Quantity', 'UnitPrice'])\n",
    "print(scaled_data_df.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28290dd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:47:52.313045Z",
     "iopub.status.busy": "2024-11-24T18:47:52.312664Z",
     "iopub.status.idle": "2024-11-24T18:47:54.031672Z",
     "shell.execute_reply": "2024-11-24T18:47:54.030175Z"
    },
    "papermill": {
     "duration": 1.727395,
     "end_time": "2024-11-24T18:47:54.034447",
     "exception": false,
     "start_time": "2024-11-24T18:47:52.307052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  InvoiceNo StockCode                          Description  Quantity  \\\n",
      "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
      "1    536365     71053                  WHITE METAL LANTERN         6   \n",
      "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
      "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
      "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
      "\n",
      "        InvoiceDate  UnitPrice  CustomerID         Country  Cluster  \n",
      "0  01-12-2010 08:26       2.55     17850.0  United Kingdom        0  \n",
      "1  01-12-2010 08:26       3.39     17850.0  United Kingdom        0  \n",
      "2  01-12-2010 08:26       2.75     17850.0  United Kingdom        0  \n",
      "3  01-12-2010 08:26       3.39     17850.0  United Kingdom        0  \n",
      "4  01-12-2010 08:26       3.39     17850.0  United Kingdom        0  \n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# Set n_init explicitly to suppress warning\n",
    "kmeans = KMeans(n_clusters=3, n_init=10, random_state=42)\n",
    "\n",
    "# Fit the model\n",
    "kmeans.fit(data[['Quantity', 'UnitPrice']])  # Use your actual columns for clustering\n",
    "\n",
    "# Predict clusters\n",
    "labels = kmeans.predict(data[['Quantity', 'UnitPrice']])\n",
    "\n",
    "# Add cluster labels to your data\n",
    "data['Cluster'] = labels\n",
    "\n",
    "print(data.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "502999c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:47:54.045910Z",
     "iopub.status.busy": "2024-11-24T18:47:54.045535Z",
     "iopub.status.idle": "2024-11-24T18:48:20.458448Z",
     "shell.execute_reply": "2024-11-24T18:48:20.457314Z"
    },
    "papermill": {
     "duration": 26.420904,
     "end_time": "2024-11-24T18:48:20.460877",
     "exception": false,
     "start_time": "2024-11-24T18:47:54.039973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "inertia = []\n",
    "for k in range(1, 11):\n",
    "    km = KMeans(n_clusters=k, random_state=42)\n",
    "    km.fit(scaled_data)\n",
    "    inertia.append(km.inertia_)\n",
    "\n",
    "plt.plot(range(1, 11), inertia)\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.ylabel('Inertia')\n",
    "plt.title('Elbow Method')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e1b27ded",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:48:20.473403Z",
     "iopub.status.busy": "2024-11-24T18:48:20.472996Z",
     "iopub.status.idle": "2024-11-24T18:48:30.242009Z",
     "shell.execute_reply": "2024-11-24T18:48:30.240764Z"
    },
    "papermill": {
     "duration": 9.778217,
     "end_time": "2024-11-24T18:48:30.244588",
     "exception": false,
     "start_time": "2024-11-24T18:48:20.466371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pca = PCA(n_components=2)\n",
    "reduced_data = pca.fit_transform(scaled_data)\n",
    "\n",
    "plt.scatter(reduced_data[:, 0], reduced_data[:, 1], c=data['Cluster'], cmap='viridis')\n",
    "plt.title('Customer Segmentation')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0b720def",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-24T18:48:30.257827Z",
     "iopub.status.busy": "2024-11-24T18:48:30.257428Z",
     "iopub.status.idle": "2024-11-24T18:48:30.280557Z",
     "shell.execute_reply": "2024-11-24T18:48:30.279299Z"
    },
    "papermill": {
     "duration": 0.032397,
     "end_time": "2024-11-24T18:48:30.282827",
     "exception": false,
     "start_time": "2024-11-24T18:48:30.250430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Quantity  UnitPrice\n",
      "0         6       2.55\n",
      "1         6       3.39\n",
      "2         8       2.75\n",
      "3         6       3.39\n",
      "4         6       3.39\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert columns to numeric and handle non-numeric data\n",
    "data['Quantity'] = pd.to_numeric(data['Quantity'], errors='coerce')\n",
    "data['UnitPrice'] = pd.to_numeric(data['UnitPrice'], errors='coerce')\n",
    "\n",
    "# Fill NaN values with the mean\n",
    "data['Quantity'] = data['Quantity'].fillna(data['Quantity'].mean())\n",
    "data['UnitPrice'] = data['UnitPrice'].fillna(data['UnitPrice'].mean())\n",
    "\n",
    "# Now proceed with your KMeans clustering or any other operations\n",
    "print(data[['Quantity', 'UnitPrice']].head())\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3631532,
     "sourceId": 6311832,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1053.958715,
   "end_time": "2024-11-24T18:48:33.614986",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-24T18:30:59.656271",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
